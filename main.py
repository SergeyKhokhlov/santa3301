from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.helper import HelperMode
import logging

logging.basicConfig(level=logging.INFO)
bot = Bot(token="5816511074:AAGI1ILeMqIy22rgd2tK4dJZ7GY2Ek3mGAA")
dp = Dispatcher(bot, storage=MemoryStorage())
kb = ["–ê–¥—Ä–µ—Å", "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", "–õ—é–±–∏–º—ã–µ —Ä–æ–ª–ª—ã", "–û—Ç–∑—ã–≤ –æ –∫–≤–µ—Å—Ç–µ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã"]
message_id = 0


class StatesClass(StatesGroup):  # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    mode = HelperMode.snake_case
    code = State()
    info = State()
    address = State()
    delivery = State()
    eat = State()
    feedback = State()
    text = State()


@dp.message_handler(commands=["start"])  # –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
async def cmd_start(message: types.Message):
    message_id = message.chat.id
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ö—Å–µ–Ω–∏—è. –í–æ—Ç —Ç—ã –∏ –ø–µ—Ä–µ—à–ª–∞ –∫ —ç—Ç–∞–ø—É 6. "
                         "–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞, "
                         "–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —ç—Ç–æ —Ç–æ —á—Ç–æ "
                         "–æ–±—ä–¥–∏–Ω–∏–ª–æ –Ω–∞—Å –≤—Å–µ—Ö: https://portal.unn.ru/app/profile/home"
                         "\n\n*–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*", parse_mode="markdown")
    await StatesClass.code.set()


@dp.message_handler(state=StatesClass.code)
async def check_code(message: types.Message, state: FSMContext):
    if message.text == "3822–ë1–§–ò5":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in kb:
            markup.add(types.KeyboardButton(i))
        await message.answer("*–≠—Ç–∞–ø 7. –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.*\n\n"
                             "–£ —Ç–µ–±—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é"
                             "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞.",
                             reply_markup=markup, parse_mode="markdown")
        await StatesClass.info.set()
    else:
        await message.answer("*–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*", parse_mode="markdown")


@dp.message_handler(state=StatesClass.info)
async def take_info(message: types.Message, state: FSMContext):
    if message.text == "–ê–¥—Ä–µ—Å":
        await message.answer("*–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):*", parse_mode="markdown",
                             reply_markup=types.ReplyKeyboardRemove())
        await StatesClass.address.set()
    elif message.text == "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏":
        await message.answer("*–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ "
                             "—É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑. –û —Ç–æ–º –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ–Ω –∫ —Ç–µ–±–µ "
                             "–ø—Ä–∏–µ–¥–µ—Ç —è —Å–æ–æ–±—â—É:*", parse_mode="markdown",
                             reply_markup=types.ReplyKeyboardRemove())
        await StatesClass.delivery.set()
    elif message.text == "–õ—é–±–∏–º—ã–µ —Ä–æ–ª–ª—ã":
        await message.answer("*–ù–∞–ø–∏—à–∏ –≤—Å–µ –≤–∏–¥—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–æ–±–æ–π —Ä–æ–ª–ª–æ–≤:*", parse_mode="markdown",
                             reply_markup=types.ReplyKeyboardRemove())
        await StatesClass.eat.set()
    elif message.text == "–û—Ç–∑—ã–≤ –æ –∫–≤–µ—Å—Ç–µ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã":
        await message.answer("*–ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤:*", reply_markup=types.ReplyKeyboardRemove(),
                             parse_mode="markdown")
        await StatesClass.feedback.set()


@dp.message_handler(state=StatesClass.address)
async def send_address(message: types.Message, state: FSMContext):
    for i in kb:
        if i == "–ê–¥—Ä–µ—Å":
            kb.remove(i)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in kb:
        markup.add(types.KeyboardButton(i))
    for i in [755974403, message.chat.id]:
        if i == 755974403:
            await bot.send_message(i, message.text)
        else:
            await bot.send_message(i, "–ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω.", reply_markup=markup)
    if len(kb) == 0:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ. –î–ª—è —Å–≤—è–∑–∏ —Å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –º–æ–∂–µ—à—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∏–ª–∞ —Å—Å—ã–ª–∫—É üòâ")
        await StatesClass.text.set()
    else:
        await StatesClass.info.set()


@dp.message_handler(state=StatesClass.delivery)
async def send_delivery(message: types.Message, state: FSMContext):
    for i in kb:
        if i == "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏":
            kb.remove(i)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in kb:
        markup.add(types.KeyboardButton(i))
    for i in [755974403, message.chat.id]:
        if i == 755974403:
            await bot.send_message(i, message.text)
        else:
            await bot.send_message(i, "–û–∫–µ–π, –∫–∞–∫ –∑–∞–∫–∞–∂—É –¥–æ—Å—Ç–∞–≤–∫—É, —Ç–æ —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É.", reply_markup=markup)
    if len(kb) == 0:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ. –î–ª—è —Å–≤—è–∑–∏ —Å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –º–æ–∂–µ—à—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∏–ª–∞ —Å—Å—ã–ª–∫—É üòâ")
        await StatesClass.text.set()
    else:
        await StatesClass.info.set()


@dp.message_handler(state=StatesClass.eat)
async def send_eat(message: types.Message, state: FSMContext):
    for i in kb:
        if i == "–õ—é–±–∏–º—ã–µ —Ä–æ–ª–ª—ã":
            kb.remove(i)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in kb:
        markup.add(types.KeyboardButton(i))
    for i in [755974403, message.chat.id]:
        if i == 755974403:
            await bot.send_message(i, message.text)
        else:
            await bot.send_message(i, "–£—á—Ç—É)", reply_markup=markup)
    if len(kb) == 0:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ. –î–ª—è —Å–≤—è–∑–∏ —Å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –º–æ–∂–µ—à—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∏–ª–∞ —Å—Å—ã–ª–∫—É üòâ")
        await StatesClass.text.set()
    else:
        await StatesClass.info.set()


@dp.message_handler(state=StatesClass.feedback)
async def send_feedback(message: types.Message, state: FSMContext):
    for i in kb:
        if i == "–û—Ç–∑—ã–≤ –æ –∫–≤–µ—Å—Ç–µ –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã":
            kb.remove(i)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in kb:
        markup.add(types.KeyboardButton(i))
    for i in [755974403, message.chat.id]:
        if i == 755974403:
            await bot.send_message(i, message.text)
        else:
            await bot.send_message(i, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ ü§ó", reply_markup=markup)

    if len(kb) == 0:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ. –î–ª—è —Å–≤—è–∑–∏ —Å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –º–æ–∂–µ—à—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∏–ª–∞ —Å—Å—ã–ª–∫—É üòâ")
        await StatesClass.text.set()
    else:
        await StatesClass.info.set()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)